// Code generated by capnpc-go. DO NOT EDIT.

package ping

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Ping capnp.Struct

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0xe31a6c9d5efc06ce

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping(st), err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping(st), err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.Root()
	return Ping(root.Struct()), err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0xe31a6c9d5efc06ce, capnp.Struct(s))
	return str
}

func (s Ping) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping) DecodeFromPtr(p capnp.Ptr) Ping {
	return Ping(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ping) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ping) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ping) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ping) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ping_List is a list of Ping.
type Ping_List = capnp.StructList[Ping]

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ping](l), err
}

// Ping_Future is a wrapper for a Ping promised by a client call.
type Ping_Future struct{ *capnp.Future }

func (f Ping_Future) Struct() (Ping, error) {
	p, err := f.Future.Ptr()
	return Ping(p.Struct()), err
}

type BlockInfo capnp.Struct

// BlockInfo_TypeID is the unique identifier for the type BlockInfo.
const BlockInfo_TypeID = 0xe76ec02a24fdc372

func NewBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockInfo(st), err
}

func NewRootBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockInfo(st), err
}

func ReadRootBlockInfo(msg *capnp.Message) (BlockInfo, error) {
	root, err := msg.Root()
	return BlockInfo(root.Struct()), err
}

func (s BlockInfo) String() string {
	str, _ := text.Marshal(0xe76ec02a24fdc372, capnp.Struct(s))
	return str
}

func (s BlockInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BlockInfo) DecodeFromPtr(p capnp.Ptr) BlockInfo {
	return BlockInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BlockInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BlockInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BlockInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BlockInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BlockInfo) Message_() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BlockInfo) SetMessage_(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BlockInfo_List is a list of BlockInfo.
type BlockInfo_List = capnp.StructList[BlockInfo]

// NewBlockInfo creates a new list of BlockInfo.
func NewBlockInfo_List(s *capnp.Segment, sz int32) (BlockInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BlockInfo](l), err
}

// BlockInfo_Future is a wrapper for a BlockInfo promised by a client call.
type BlockInfo_Future struct{ *capnp.Future }

func (f BlockInfo_Future) Struct() (BlockInfo, error) {
	p, err := f.Future.Ptr()
	return BlockInfo(p.Struct()), err
}

const schema_85d3acc39d94e0f8 = "x\xda\x12\xc8w`1\xe4\x15gb`\x0a\x94`e" +
	"\xfb\x7f\x8e\xedO\xdc\xdc\x1c\xa9\xc7\x0c\x82\xdc\x8c\xff\x7f" +
	"<\x982\xf7\xf0\x9a\xcb\xad\x0c\xac\x8c\xec\x0c\x0c\x82\x1f" +
	"\x9b\x04\xbf\x82i{\x06\xc6\xffE\x87\xff\xaah\x1d\xc8" +
	"{\x8eE\xa1\xb0 \xe3*aI0K\x94\xd1\x9eA" +
	"\xf7\x7fAf^\xba^rb\x01c^\x81U@f" +
	"^:C\x00#c \x0b3\x0b\x03\x03\x0b#\x03\x83" +
	" \xaf\x13\x03C \x073c\xa0\x08\x13c}nj" +
	"qqbz*#\x0f\x03\x13#\x0f\x03#\x8a^\xa7" +
	"\x9c\xfc\xe4l~\xcf\xbc\xb4|\"\x0c\xe0e`b\xe4" +
	"e`\x04\x04\x00\x00\xff\xff\x1f\xe09\xcd"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_85d3acc39d94e0f8,
		Nodes: []uint64{
			0xe31a6c9d5efc06ce,
			0xe76ec02a24fdc372,
		},
		Compressed: true,
	})
}
